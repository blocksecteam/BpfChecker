#include <uapi/linux/bpf.h>
#include "bpf_helpers.h"

typedef u32 valtype;

struct bpf_map_def SEC("maps") m = {
	.type = BPF_MAP_TYPE_ARRAY,
	.key_size = sizeof(u32),
	.value_size = sizeof(valtype)*VALUE_SIZE,
	.max_entries = 1,
};

SEC("sk_skb/diff_eq")
int diff_eq(struct __sk_buff *skb)
{
	u32 key1 = 1;
	valtype* value1 = bpf_map_lookup_elem(&m, &key1);
	valtype* value2 = bpf_map_lookup_elem(&m, &key1);
	if (!value1 || !value2) return 1;
	unsigned eq = 0;
	unsigned diff = 0;
#pragma clang loop unroll_count(VALUE_SIZE)
	for (int i=0; i < VALUE_SIZE; i++) {
		if (value1[i] != value2[i]) {
			diff++;
		} else {
			eq++;
		}
	}
	return eq > diff;
}

char _license[] SEC("license") = "GPL";
u32 _version SEC("version") = 0x041800;
