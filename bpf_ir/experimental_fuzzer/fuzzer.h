#ifndef BPF_IR_FUZZER_H
#define BPF_IR_FUZZER_H

#include <lkl.h>
#include <lkl_host.h>
#include <syscall.h>
#include <lkl/linux/bpf.h>
#include <lkl/linux/errno.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

// log configuration
#define ENABLE_LOG 1


#define INPUT_LEN (1 << 16)
#define BPF_LOG_BUF_LEN (1 << 16)
static unsigned char input_buf[INPUT_LEN];
static char bpf_log_buf[BPF_LOG_BUF_LEN];

#define insn_count  (0)
//const int bpf_log_level = 2;
#define bpf_log_level  (2)

void error(const char *fmt, ...) {
#ifdef ENABLE_LOG
    va_list args;
    va_start(args, fmt);
    fprintf(stdout, "[!] ");
    vfprintf(stdout, fmt, args);
    va_end(args);
#endif
//    exit(0);
}

void debug(const char *fmt, ...) {
#ifdef ENABLE_LOG
    va_list args;
    va_start(args, fmt);
    fprintf(stdout, "[*] ");
    vfprintf(stdout, fmt, args);
    va_end(args);
#endif
}

void success(const char *fmt, ...) {
#ifdef ENABLE_LOG
    va_list args;
    va_start(args, fmt);
    fprintf(stdout, "[+] ");
    vfprintf(stdout, fmt, args);
    va_end(args);
#endif
}

union lkl_bpf_attr load_attr = {
        .prog_type = LKL_BPF_PROG_TYPE_SOCKET_FILTER,
        .insn_cnt  = insn_count,
        .insns     = (uint64_t) input_buf,
        .license   = (uint64_t) "GPL",
        .log_level = (uint32_t) bpf_log_level,
        .log_size  = bpf_log_level ? BPF_LOG_BUF_LEN : 0,
        .log_buf   = (uint64_t) (bpf_log_level ? bpf_log_buf : 0),
};

static inline void compiler_enter_lkl(void) {

}

static inline void compiler_exit_lkl(void) {

}

static inline long lkl_exit_wrapper(long result) {
    compiler_exit_lkl();
    return result;
}

#define LKL_SAFE_SYSCALL(name, ...) \
    (compiler_enter_lkl(), lkl_exit_wrapper( \
        lkl_syscall(__lkl__NR_##name, (long[]){__VA_ARGS__, 0, 0, 0, 0, 0, 0})))

#define INVOKE_SYSCALL(syscall_name, ...) \
        LKL_SAFE_SYSCALL(syscall_name, __VA_ARGS__)));

#define LKL_ERRNO(retval) (retval)
#define LKL_STRERROR(retval) lkl_strerror((retval))

int lkl_bpf_create_map(enum lkl_bpf_map_type map_type,
                       unsigned int key_size,
                       unsigned int value_size,
                       unsigned int max_entries) {
    union lkl_bpf_attr attr = {
            .map_type = map_type,
            .key_size = key_size,
            .value_size = value_size,
            .max_entries = max_entries};

//    return syscall(__NR_BPF, BPF_MAP_CREATE, &attr, sizeof(attr));
    return LKL_SAFE_SYSCALL(bpf, LKL_BPF_MAP_CREATE, (long) &attr, sizeof(attr));
}

char fake_buffer[64];

int run_program(int socket_zero) {
    ssize_t n = write(socket_zero, fake_buffer, sizeof(fake_buffer));
    if (n < 0) {
        error("Fail to write. (Can't run the program)\n");
        return 1;
    }
    if (n != sizeof(fake_buffer)) {
        error("Fail to write due to short write: %zd. (Can't run the program)\n", n);
    }
    return 0;
}


#define ptr_to_u64(ptr) ((lkl_u64)(unsigned long)(ptr))

int lkl_bpf_prog_test_run(int prog_fd, int repeat, void *data, lkl_u32 size,
                          void *data_out_ptr, lkl_u32 *size_out, lkl_u32 *retval,
                          lkl_u32 *duration) {
    union lkl_bpf_attr attr;
    int ret;

    memset(&attr, 0, sizeof(attr));
    attr.test.prog_fd = prog_fd;
    attr.test.data_in = ptr_to_u64(data);
    attr.test.data_out = ptr_to_u64(data_out_ptr);
    attr.test.data_size_in = size;
    attr.test.repeat = repeat;

    ret = (int) LKL_SAFE_SYSCALL(bpf, LKL_BPF_PROG_TEST_RUN, &attr, sizeof(attr));
    if (size_out)
        *size_out = attr.test.data_size_out;
    if (retval)
        *retval = attr.test.retval;
    if (duration)
        *duration = attr.test.duration;
    return ret;
}


// return 1 if successfully change the map fd
int fix_map_fd(unsigned char *buffer, int map_fd) {
    if (buffer[0] != 0x18 || buffer[1] != 0x19) {
        return 0;
    }
    struct inner_bpf_insn{
        uint8_t code;
        uint8_t dst;
        uint8_t src;
        int16_t off;
        int32_t imm;
    };

    struct inner_bpf_insn* instructionsPtr = (struct inner_bpf_insn*)buffer;
    instructionsPtr[0].imm = map_fd;
    return 1;
}

int my_lkl_bpf_lookup_elem(int fd, const void *key, void *value) {
    union lkl_bpf_attr attr = {
            .map_fd = fd,
            .key = ptr_to_u64(key),
            .value = ptr_to_u64(value),
    };

    return LKL_SAFE_SYSCALL(bpf, LKL_BPF_MAP_LOOKUP_ELEM, &attr, sizeof(attr));
}

static int my_lkl_bpf_update_elem(int fd, const void *key, const void *value,
                                  uint64_t flags) {
    union lkl_bpf_attr attr = {
            .map_fd = fd,
            .key = ptr_to_u64(key),
            .value = ptr_to_u64(value),
            .flags = flags,
    };

    return LKL_SAFE_SYSCALL(bpf, LKL_BPF_MAP_UPDATE_ELEM, &attr, sizeof(attr));
}

int lookup_elem(int fd, int key, const unsigned char *value) {
    return my_lkl_bpf_lookup_elem(fd, &key, (void *) value);
}

int update_elem(int fd, int key, const unsigned char *value) {
    return my_lkl_bpf_update_elem(fd, &key, value, 0);
}

int64_t CANDIDATE_BUFFER[] = {-2147483648, -2147483647, -2147483632, -2147483616, -2147483584, -2147483548, -2147483521, -2147483520, -2147483393, -2147483392, -2147483136, -2147482648, -2147482624, -2147479552, -2147450881, -2147450880, -2147418113, -2147418112, -2046820603, -100663296, -100663291, -100663174, -100663168, -100663163, -100663138, -100663110, -100663078, -100663062, -100663046, -100663045, -100663042, -100663041, -100663030, -100663014, -100662982, -100662946, -100662919, -100662918, -100662791, -100662790, -100662534, -100662510, -100662278, -100662046, -100662022, -100658950, -100630779, -100630529, -100630279, -100630278, -100598011, -100597761, -100597511, -100597510, -67103365, -33559682, -98305, -98304, -65665, -65664, -65536, -65409, -65408, -36865, -33793, -33769, -33281, -33025, -33024, -32897, -32896, -32869, -32833, -32801, -32785, -32770, -32769, -32768, -32767, -32753, -32752, -32737, -32736, -32705, -32704, -32669, -32668, -32642, -32641, -32640, -32518, -32514, -32513, -32512, -32257, -32256, -31769, -31768, -31745, -31744, -29447, -28673, -28672, -4225, -4224, -3323, -1153, -1152, -920, -873, -641, -640, -385, -384, -256, -251, -229, -193, -161, -145, -130, -129, -128, -127, -126, -125, -123, -122, -113, -112, -97, -96, -89, -65, -64, -41, -32, -29, -28, -24, -8, -6, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 15, 16, 17, 24, 26, 27, 28, 31, 32, 33, 35, 36, 40, 45, 47, 48, 51, 52, 54, 55, 56, 58, 63, 64, 65, 67, 68, 71, 72, 75, 80, 84, 95, 96, 99, 100, 101, 104, 111, 112, 116, 119, 122, 124, 125, 126, 127, 128, 129, 130, 132, 143, 144, 145, 155, 156, 159, 160, 161, 164, 191, 192, 193, 200, 223, 224, 227, 228, 229, 231, 232, 235, 239, 240, 244, 250, 254, 255, 256, 257, 261, 271, 272, 287, 288, 319, 320, 352, 355, 356, 382, 383, 384, 385, 412, 448, 480, 488, 496, 510, 511, 512, 513, 528, 535, 536, 544, 576, 612, 639, 640, 641, 647, 744, 745, 767, 768, 769, 773, 791, 871, 872, 873, 895, 896, 897, 900, 908, 919, 924, 936, 954, 960, 968, 984, 992, 999, 1000, 1001, 1004, 1008, 1016, 1023, 1024, 1025, 1032, 1040, 1056, 1064, 1088, 1100, 1124, 1127, 1128, 1129, 1151, 1152, 1153, 1255, 1256, 1279, 1280, 1285, 1512, 1536, 1600, 2000, 2024, 2032, 2048, 2821, 3072, 3096, 3200, 3584, 3840, 3841, 3845, 3967, 3968, 3969, 3996, 4032, 4064, 4080, 4095, 4096, 4097, 4112, 4128, 4160, 4196, 4223, 4224, 4225, 4351, 4352, 4608, 5096, 5120, 6400, 8128, 8160, 8192, 10000, 12700, 12800, 16000, 16129, 16256, 16320, 16384, 16512, 16641, 25500, 25600, 28671, 28672, 29945, 31743, 31744, 31767, 31768, 32000, 32255, 32256, 32385, 32511, 32512, 32513, 32517, 32638, 32639, 32640, 32641, 32667, 32668, 32703, 32704, 32735, 32736, 32751, 32752, 32765, 32766, 32767, 32768, 32769, 32770, 32783, 32784, 32785, 32799, 32800, 32801, 32831, 32832, 32833, 32867, 32868, 32869, 32894, 32895, 32896, 32897, 33022, 33023, 33024, 33025, 33279, 33280, 33281, 33767, 33768, 33769, 33791, 33792, 33793, 36863, 36864, 36865, 51200, 61439, 61440, 64000, 64249, 64511, 64512, 64535, 64536, 65023, 65024, 65025, 65279, 65280, 65281, 65285, 65406, 65407, 65408, 65409, 65435, 65436, 65471, 65472, 65503, 65504, 65519, 65520, 65534, 65535, 65536, 65537, 65551, 65552, 65567, 65568, 65599, 65600, 65635, 65636, 65662, 65663, 65664, 65665, 65790, 65791, 65792, 66047, 66048, 66535, 66536, 66559, 66560, 69631, 69632, 98302, 98303, 98304, 98305, 100000, 102400, 127000, 128000, 130048, 130560, 131070, 131071, 131072, 255000, 256000, 261120, 262144, 409600, 512000, 520192, 524272, 524288, 1000000, 1024000, 1044480, 1048544, 1048560, 1048576, 2097088, 2097120, 2097152, 3276700, 3276800, 4096000, 4161409, 4161536, 4194176, 4194240, 4194304, 4194432, 4227072, 4227201, 6553500, 6553600, 8322945, 8323072, 8355585, 8355840, 8388352, 8388480, 8388608, 16711425, 16711680, 16776704, 16776960, 16777216, 32767000, 32768000, 33553408, 33553920, 33554432, 33559702, 65535000, 65536000, 67103342, 67107840, 67108864, 100597509, 100597510, 100598010, 100630276, 100630277, 100630278, 100630528, 100630778, 100658949, 100662021, 100662045, 100662509, 100662533, 100662789, 100662790, 100662916, 100662917, 100662918, 100662945, 100662981, 100663013, 100663029, 100663040, 100663044, 100663045, 100663046, 100663047, 100663061, 100663062, 100663077, 100663078, 100663109, 100663110, 100663137, 100663141, 100663145, 100663146, 100663162, 100663167, 100663172, 100663173, 100663174, 100663277, 100663290, 100663295, 100663300, 100663301, 100663302, 100663557, 100663558, 100664045, 100664046, 100664069, 100664070, 100667141, 100667142, 100695812, 100695813, 100695814, 100728580, 100728581, 100728582, 134213632, 134217728, 201326090, 201326091, 268431360, 268435456, 1073676289, 1073709056, 1073741824, 1073774592, 1073807361, 1610608720, 2046820601, 2046820602, 2147385345, 2147418111, 2147418112, 2147450878, 2147450879, 2147450880, 2147479551, 2147482623, 2147482647, 2147483135, 2147483391, 2147483392, 2147483518, 2147483519, 2147483520, 2147483547, 2147483583, 2147483615, 2147483631, 2147483646, 2147483647, 2147483648, 2147483649, 2147483663, 2147483664, 2147483679, 2147483680, 2147483711, 2147483712, 2147483747, 2147483748, 2147483774, 2147483775, 2147483776, 2147483902, 2147483903, 2147483904, 2147484159, 2147484160, 2147484647, 2147484648, 2147484671, 2147484672, 2147487743, 2147487744, 2147516414, 2147516415, 2147516416, 2147549182, 2147549183, 2147549184, 2248146692, 2248146693, 3221217440, 4294836225, 4294901760, 4294967294, 4294967295, 4294967296, 6442434880, 10066304500, 12784206715, 12884869760, 12884869888, 12985532934, 25669076475, 25769739520, 34359738352, 51539479040, 68719476704, 100663045000, 103078958080, 137438953408, 214748364700, 272730423169, 274877906816, 274877906944, 277025390592, 412315832320, 547608329985, 549755813632, 1099511627264, 2147483647000, 2199023254528, 3298425995515, 3298526658560, 3298526691328, 3298627354374, 6596952654075, 6597053317120, 8796093018112, 70366596661249, 70368744144896, 70368744177664, 70370891661312, 140735340806145, 140737488289792, 10133048628672025, 10133048829998116, 216172242994725115, 216172245242871808, 4611686014132420609, 4611686018427387904, 4611686020574871551, 9007199791712567045, 9007199793759387647, 9213238988125440737, 9223231299366420479, 9223231301513904127, 9223301665963147264, 9223301668110598143, 9223301668110630911, 9223301670258081791, 9223363240761753599, 9223365439801393151, 9223365439902056197, 9223368738227454202, 9223368738328084479, 9223368738328117247, 9223368738428747525, 9223369837831520255, 9223369889371127807, 9223370937343148031, 9223371487098961919, 9223371489246445567, 9223371624538939391, 9223371759829385344, 9223371761976868863, 9223371761976868991, 9223371764124352511, 9223371822106411007, 9223371899415822335, 9223371933775816703, 9223371936191729807, 9223371968135299071, 9223371985315296255, 9223372002495037439, 9223372011085036031, 9223372011185699077, 9223372023869243002, 9223372023969905919, 9223372023969906047, 9223372024070568965, 9223372026788471207, 9223372030412340863, 9223372032559808511, 9223372032559808512, 9223372033633558335, 9223372034606629113, 9223372034606629114, 9223372034707226623, 9223372034707226624, 9223372034707259390, 9223372034707259391, 9223372034707259392, 9223372034707288063, 9223372034707291135, 9223372034707291159, 9223372034707291647, 9223372034707291903, 9223372034707291904, 9223372034707292030, 9223372034707292031, 9223372034707292032, 9223372034707292059, 9223372034707292095, 9223372034707292127, 9223372034707292143, 9223372034707292158, 9223372034707292159, 9223372034707292160, 9223372036854772735, 9223372036854773743, 9223372036854773759, 9223372036854774654, 9223372036854774655, 9223372036854774678, 9223372036854774679, 9223372036854774783, 9223372036854774784, 9223372036854774799, 9223372036854774807, 9223372036854774808, 9223372036854774815, 9223372036854774823, 9223372036854774839, 9223372036854774847, 9223372036854774871, 9223372036854774883, 9223372036854774907, 9223372036854774910, 9223372036854774911, 9223372036854774934, 9223372036854774935, 9223372036854775038, 9223372036854775039, 9223372036854775062, 9223372036854775063, 9223372036854775166, 9223372036854775167, 9223372036854775295, 9223372036854775296, 9223372036854775311, 9223372036854775319, 9223372036854775327, 9223372036854775359, 9223372036854775395, 9223372036854775422, 9223372036854775423, 9223372036854775424, 9223372036854775549, 9223372036854775550, 9223372036854775551, 9223372036854775552, 9223372036854775553, 9223372036854775567, 9223372036854775568, 9223372036854775578, 9223372036854775579, 9223372036854775583, 9223372036854775584, 9223372036854775614, 9223372036854775615, 9223372036854775616, 9223372036854775646, 9223372036854775647, 9223372036854775651, 9223372036854775652, 9223372036854775662, 9223372036854775663, 9223372036854775677, 9223372036854775678, 9223372036854775679, 9223372036854775680, 9223372036854775681, 9223372036854775694, 9223372036854775695, 9223372036854775696, 9223372036854775707, 9223372036854775708, 9223372036854775710, 9223372036854775711, 9223372036854775712, 9223372036854775723, 9223372036854775739, 9223372036854775742, 9223372036854775743, 9223372036854775744, 9223372036854775759, 9223372036854775771, 9223372036854775775, 9223372036854775776, 9223372036854775778, 9223372036854775779, 9223372036854775780, 9223372036854775783, 9223372036854775791, 9223372036854775792, 9223372036854775805, 9223372036854775806};

#endif //BPF_IR_FUZZER_H
